<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/post/0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p>
<p>该文章转自：<a href="https://blog.51cto.com/e21105834/2993570">上次说了静态数组可变长，今天知道原理了</a></p>
<h1 id="Ⅰ-变长数组是长度一直可以变的吗"><a href="#Ⅰ-变长数组是长度一直可以变的吗" class="headerlink" title="Ⅰ. 变长数组是长度一直可以变的吗"></a>Ⅰ. 变长数组是长度一直可以变的吗</h1><p>​		变长数组，那么是长度一直可以变的吗，到底什么时候这个长度会确定下来呢？</p>
<p>​		我们先看一下代码，如下：（注意vs编译器中不支持变长数组）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> size = <span class="number">1000</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;please input a number:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; size;</span><br><span class="line">	<span class="type">int</span> arr[size];</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;please input a number too:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; size;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;arr&#x27;s size is &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​		假设我们第一次输入100，第二次输入10000，那么最后一个cout到底输出多少呢，答案是100。</p>
<p>​		这里的所谓变长数组，实际上指的是可以使用变量来作为数组的元素个数，在还未运行到声明数组的地方时，还可以通过改变变量的值来修改数组的元素个数，但是等到运行到数组声明的地方后，这个数组的大小就确定了，后续就不能再改变了，所以所谓的变长也只是相对于运行到这个数组声明的地方而言。</p>
<h1 id="Ⅱ-变长数组是分配在堆上吗"><a href="#Ⅱ-变长数组是分配在堆上吗" class="headerlink" title="Ⅱ. 变长数组是分配在堆上吗"></a>Ⅱ. 变长数组是分配在堆上吗</h1><p>​		当然不是，注意这里概念不要搞混淆了，变长数组不是动态数组，虽然是到运行时才确定大小，但说到底它还是局部变量，而局部变量，又没有动态申请内存的动作，当然也只会在栈上分配内存。</p>
<p>​		关于这一点我们可以结合gdb和寄存器地址来看一下，我的机器是x86架构，那么栈的内存分配方式就应该是从高地址往低地址分配，如果学过汇编的会知道，<code>gcc</code> 编译的时候不添加 <strong><code>-O1</code></strong> 或者 <strong><code>-O2</code></strong> 这样的选项，那么栈底指针地址会保存在寄存器 <code>rbp</code> 中，而栈顶指针则会保存在 <code>rsp</code> 寄存器中，如果地址是在 <code>rsp</code> 和<code>rbp</code> 之间的，那就可以肯定这段内存是保存在栈中了。</p>
<p>​		还是这段代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> size = <span class="number">1000</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;please input a number:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; size;</span><br><span class="line">	<span class="type">int</span> arr[size];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​		使用 <strong><code>g++ -g test.cpp</code><strong>（注意这里千万不能加优化选项）编译后，</strong><code>gdb ./a.out</code></strong> 看一下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(gdb) b main #打断点</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x4007fd</span>: file test.cpp, line <span class="number">11.</span></span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /root/a.out </span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, <span class="built_in">main</span> () at test.cpp:<span class="number">11</span></span><br><span class="line"><span class="number">11</span>		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">6</span>		<span class="type">int</span> size = <span class="number">1000</span>;</span><br><span class="line">(gdb) </span><br><span class="line"><span class="number">7</span>		cout &lt;&lt; <span class="string">&quot;please input a number:&quot;</span>;</span><br><span class="line">(gdb) </span><br><span class="line"><span class="number">8</span>		cin &gt;&gt; size;</span><br><span class="line">(gdb) </span><br><span class="line">please input a number:<span class="number">10000</span></span><br><span class="line"><span class="number">9</span>		<span class="type">int</span> arr[size];</span><br><span class="line">(gdb) p $rbp  #打出基址寄存器的值</span><br><span class="line">$<span class="number">1</span> = (<span class="type">void</span> *) <span class="number">0x7fffffffe840</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">11</span>		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">(gdb) p &amp;arr[<span class="number">0</span>]</span><br><span class="line">$<span class="number">3</span> = (<span class="type">int</span> *) <span class="number">0x7fffffff4ba0</span></span><br><span class="line">(gdb) p $rsp  #打出栈顶指针的值</span><br><span class="line">$<span class="number">4</span> = (<span class="type">void</span> *) <span class="number">0x7fffffff4ba0</span></span><br><span class="line">(gdb) </span><br></pre></td></tr></table></figure>

<p>​		可以看到，<code>arr</code> 数组的首地址是在 <strong><code>(rsp, rbp)</code></strong> 这个范围之间的，所以运行时的变长数组也是保存在栈中的，既然是在栈中，那么这段内存在这个变量作用域结束以后就会被释放掉。</p>
<h1 id="Ⅲ-变长数组与alloca函数"><a href="#Ⅲ-变长数组与alloca函数" class="headerlink" title="Ⅲ. 变长数组与alloca函数"></a>Ⅲ. 变长数组与alloca函数</h1><p>​		同时这次也是涨知识了，我才知道 <code>c</code> 标准库中有个 <strong><code>alloca</code> 函数</strong>，它的用法类似 **<code>malloc</code>**，但内存因为是在栈上申请的，也是不需要手动释放的，这么一看，这个函数的原理和变长数组其实是一样的，都可以使用运行时才确定大小的变量值来申请栈空间，并且不需要手动释放。</p>
<p>​		知道以后，我也很好奇，所以还专门去研究了下这两者的汇编指令是不是一样，先看下 <code>c++</code> 代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;alloca.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> size = <span class="number">1000</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;please input a number:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; size;</span><br><span class="line">	<span class="type">int</span> arr[size];</span><br><span class="line">    </span><br><span class="line">	<span class="type">int</span> *p = (<span class="type">int</span>*)<span class="built_in">alloca</span>(size);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​		然后通过 **<code>gdb</code>**，我分别打印出来 <strong><code>int arr[size]</code></strong> 和 <strong><code>int *p = (int*)alloca(size)</code></strong> 这两行代码所对应的汇编指令，做了一个对比，如图：</p>
<p><img src="/../../img/image-20230219123034636.png" alt="image-20230219123034636"></p>
<p>​		可以看得出来变长数组是在一开始先做了一些其他的动作，然后后面的指令跟alloca的指令基本就是一样的了，也就是说最终他两的实现是比较类似的。</p>
<h1 id="Ⅳ-变长数组使用注意点"><a href="#Ⅳ-变长数组使用注意点" class="headerlink" title="Ⅳ. 变长数组使用注意点"></a>Ⅳ. 变长数组使用注意点</h1><p>​		基于变长数组的特点，它其实相当于一个变相版的动态申请内存，只是不需要堆而言，而这种场景多应用于小型机里面，比如很多嵌入式环境，因为资源有限，是没有堆内存的，那如果又需要动态改变数组大小怎么办，就可以使用变长数组，但这时也需要限定一下大小，不然很容易就会造成栈溢出。</p>
]]></content>
  </entry>
</search>
